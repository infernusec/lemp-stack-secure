
# Cache for static files
#location ~* \.(?:css|js|cur|js|jpe?g|gif|htc|ico|png|otf|ttf|eot|woff|svg|woff2)$ {
#       access_log off; 
#       expires max;
#       add_header Cache-Control public;
#       add_header X-Static-Loaded "yes cached";

        ## No need to bleed constant updates. Send the all shebang in one
        ## fell swoop.
#       tcp_nodelay off;
        ## Set the OS file cache.
#       open_file_cache max=3000 inactive=120s;
#       open_file_cache_valid 45s;
#       open_file_cache_min_uses 2;
#       open_file_cache_errors off;
#}


location / {
    include /etc/nginx/ngxblocker/bots.d/blockbots.conf;
    include /etc/nginx/ngxblocker/bots.d/ddos.conf;

    # if ($args ~ "^author=\d") { return 404; }
    
    # Works on sub directories..
    if ($query_string ~ "author=([0-9]*)") { return 403; }
    if ($args ~ "rest_route=/wp/v2/users") { return 500; }
    # requires server support
    gzip_static on;

    error_page 418 = @cachemiss;
    error_page 419 = @mobileaccess;
    recursive_error_pages on;

    # bypass POST requests
    if ($request_method = POST) { return 418; }

    # uncommenting the following degrades the performance on certain sites. YMMV
    # if ($query_string != "") { return 418; }

    # bypass cache for common query strings
    if ($arg_s != "") { return 418; } # search query
    if ($arg_p != "") { return 418; } # request a post / page by ID
    if ($arg_amp != "") { return 418; } # amp test
    if ($arg_preview = "true") { return 418; } # preview post / page
    if ($arg_ao_noptimize != "") { return 418; } # support for Autoptimize plugin

    if ($http_cookie ~* "wordpress_logged_in_") { return 418; }
    if ($http_cookie ~* "comment_author_") { return 418; }
    if ($http_cookie ~* "wp_postpass_") { return 418; }

    # avoid duplicate content on Amazon CloudFront and KeyCDN.
    if ( $http_user_agent = "Amazon CloudFront" ) { return 403; access_log off; }
    if ($http_x_pull = "KeyCDN") { return 403; access_log off; }

    # uncomment the following, if WP Super Cache plugin is set to create a separate cache for mobile visitors
    # if ($http_user_agent ~* "2.0\ MMP|240x320|400X240|AvantGo|BlackBerry|Blazer|Cellphone|Danger|DoCoMo|Elaine/3.0|EudoraWeb|Googlebot-Mobile|hiptop|IEMobile|KYOCERA/WX310K|LG/U990|MIDP-2.|MMEF20|MOT-V|NetFront|Newt|Nintendo\ Wii|Nitro>
    # add_header "Vary" "User-Agent";

    # uncomment the following if deemed fit, in addition to the above line to enable @mobileaccess
    # if ($http_user_agent ~* "w3c\ |w3c-|acs-|alav|alca|amoi|audi|avan|benq|bird|blac|blaz|brew|cell|cldc|cmd-|dang|doco|eric|hipt|htc_|inno|ipaq|ipod|jigs|kddi|keji|leno|lg-c|lg-d|lg-g|lge-|lg/u|maui|maxo|midp|mits|mmef|mobi|mot-|moto|>

    try_files "/wp-content/cache/supercache/$host${uri}index-https.html"
        "/wp-content/cache/cache-enabler/$host${uri}index.html"
        "/wp-content/cache/wp-rocket/$host${uri}$is_args$args/index-https.html"
        "/wp-content/cache/all/${uri}index.html" $uri $uri/ /index.php$is_args$args;

    #--> all the following would apply, only if the request hits the cache

    add_header "X-Cache" "HIT - WP Super Cache";

    # expires modified 30m;
    expires 30m;
    add_header "Cache-Control" "must-revalidate";

    # For proxies
    # add_header "Cache-Control" "s-maxage=3600";
}

location @mobileaccess {
    # try_files $uri $uri/ /index.php$is_args$args;
    try_files "/wp-content/cache/supercache/$host${uri}index-https-mobile.html"
        "/wp-content/cache/cache-enabler/$host${uri}index.html"
        "/wp-content/cache/wp-rocket/$host${uri}$is_args$args/index-https.html"
        "/wp-content/cache/all/${uri}index.html" $uri $uri/ /index.php$is_args$args;

    add_header "X-Cache" "HIT - Mobile - WP Super Cache";

    # expires modified 30m;
    expires 30m;
    add_header "Cache-Control" "must-revalidate";

    # For proxies
    # add_header "Cache-Control" "s-maxage=3600";
}

location @cachemiss {
    try_files $uri $uri/ /index.php$is_args$args;
}

